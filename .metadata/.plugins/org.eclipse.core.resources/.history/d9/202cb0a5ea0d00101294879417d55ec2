import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;

public class Algo3_서울_12_정민주 {
	private static int[][] graph; //그래프 배열
	private static int N; //전체 노드의 수 N
	private static int M; //간선 정보의 수 M
	private static int P; //특정 노드의 번호 P
	public static void main(String[] args) throws Exception { //main 시작
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); //입력을 받기 위함
		int T = Integer.parseInt(br.readLine()); //테스트케이스 개수
		for (int testCase = 1; testCase <= T; testCase++) { //테스트케이스만큼 반복
			int ans = 0; //정답 변수
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			N = Integer.parseInt(st.nextToken()); //전체 노드의 수 N
			M = Integer.parseInt(st.nextToken()); //간선 정보의 수 M
			P = Integer.parseInt(st.nextToken()); //특정 노드의 번호 P
			graph = new int[N+1][N+1]; //0번은 안 씀
			for (int i = 0; i < M; i++) { //M번만큼 입력받음
				st = new StringTokenizer(br.readLine(), " ");
				int A = Integer.parseInt(st.nextToken()); //노드 번호 입력
				int B = Integer.parseInt(st.nextToken()); //노드 번호 입력
				graph[A][B] = 1; //해당하는 부분 1로 저장
				graph[B][A] = 1; //해당하는 부분 1로 저장
			}
			ans = bfs(P); // P부분 bfs
			System.out.println("#" + testCase + " " + ans); //정답 출력
		} //테스트케이스 끝
	} //main 끝

	public static int bfs(int p) { //bfs를 위한 함수
		Queue<Integer> exPlan = new ArrayDeque<>(); //실행 계획을 보기 위한 queue 생성
		boolean[] visited = new boolean[N+1]; //방문 체크
		int[] countNode = new int[N+1]; //제일 먼 노드 구하기 위해 만든 배열
		exPlan.add(p); // 시작점
		while(!exPlan.isEmpty()) { //큐가 비지 않았을 동안
			int vertex = exPlan.poll(); //현재 값 뽑기
			if(visited[vertex]) { //이미 방문한 곳이면
				continue; //넘어감
			}
			visited[vertex] = true; //방문체크
			int[] relation = graph[vertex]; //현재 값과 연관된 값들
			for (int i = 1; i < relation.length; i++) {
				if(relation[i] == 1 && !visited[i]) { //만약에 연관관계가 1이고 아직 방문 안했으면
					exPlan.add(i); //큐에 추가
					countNode[i] = countNode[vertex] + 1; //count에 추가
				} //조건문 끝
			} //for 반복문 끝
		} //while 반복문 끝
		Arrays.sort(countNode); //max를 구하기 위해 정렬
		int maxCount = 0; //maxCount를 구하기 위해 변수 생성
		for (int i = countNode.length - 1; i >= 0; i--) {		
			int max = countNode[countNode.length - 1]; //일단 max를 제일 큰 값으로 둠
			if(max == countNode[i]) { //만약에 max랑 값이 같으면 가장 먼 노드
				maxCount++; //count에 1 더함
			} //조건문 끝
		} //반복문 끝
		return maxCount; //가장 먼 노드 수 리턴
	} //bfs 함수 끝
} //class 끝