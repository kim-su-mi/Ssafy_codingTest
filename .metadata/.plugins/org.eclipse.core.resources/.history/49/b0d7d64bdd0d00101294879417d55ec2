import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Algo3_서울_12_김수미 { // start class
	private static int V; //간선
	static List<Integer>[] list;//list배열
	public static void main(String[] args) throws NumberFormatException, IOException { //main start
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));//입력
		int T = Integer.parseInt(br.readLine()); //testCase개수 
		StringBuilder sb; //출력을 위한 변수
		for (int tc = 1; tc <=T; tc++) { //testCase를 위한 for문
			StringTokenizer st = new StringTokenizer(br.readLine()); //입력
			V = Integer.parseInt(st.nextToken()); //노드의 수
			int E = Integer.parseInt(st.nextToken()); //간선의 수
			int P = Integer.parseInt(st.nextToken()); //특정 노드 
			list = new ArrayList[V+1]; //list생성
			for (int i = 0; i <= V; i++) { //리스트 초기화
				list[i] = new ArrayList<>(); //리스트 생성
			}//end for
			for (int i = 0; i < E; i++) {//간선 입력
				st = st = new StringTokenizer(br.readLine()); //입력
				int s = Integer.parseInt(st.nextToken());//정점
				int e = Integer.parseInt(st.nextToken());//정점
				list[s].add(e);//연결
				list[e].add(s);//연결
			}//end for
			int reusult = dfs(3); //dfs돌림
			System.out.println("#"+tc+" "+(reusult+2));//출력
		}//end testCase
	}// end main
	private static int dfs(int start) { //dfs메서드
		boolean[] visited = new boolean[V+1];//방문 체크
		Queue<Integer> q = new LinkedList<>();//큐 생성
		q.add(start);//q에 정점 넣음
		visited[start] = true;//방문체크
		int cnt = 0;//개수 셈
			while(!q.isEmpty()) { //큐가 빌때까지
				int a = q.poll(); //큐에서 하나 뺌
				int size = list[a].size();
				for (int i = 0; i < size; i++) {// 방문한 곳이 아니면 연결된 정점 큐에 넣음
					cnt = 0;
					if(!visited[list[a].get(i)]) { // 방문한 곳이 아니면 연결된 정점 큐에 넣음
						visited[list[a].get(i)] = true; //방문쳌
						q.add(list[a].get(i));//큐에 넣음
						++cnt;//개수 더함
					}
				}
			}
			return cnt;
	}
}
